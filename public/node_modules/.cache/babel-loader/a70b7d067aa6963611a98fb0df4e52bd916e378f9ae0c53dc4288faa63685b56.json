{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\reactjs\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { createBrowserRouter, RouterProvider, useRoutes } from 'react-router-dom';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport About from './component/About';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const [textMode, setTextMode] = useState('dark');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setTextMode(\"light\");\n      document.body.style.backgroundColor = \"#212529\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"Text Editor - Dark Edition\";\n    } else {\n      setMode(\"light\");\n      setTextMode(\"dark\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", 'success');\n      document.title = \"Text Editor - Light Edition\";\n    }\n  };\n  const routes = [{\n    path: \"/about\",\n    element: /*#__PURE__*/_jsxDEV(About, {\n      mode: mode,\n      toggleMode: toggleMode,\n      text: textMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this)\n  }, {\n    path: \"/home\",\n    element: /*#__PURE__*/_jsxDEV(TextForm, {\n      heading: \"Enter Text Here\",\n      mode: mode,\n      toggleMode: toggleMode,\n      text: textMode,\n      showAlert: showAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this)\n  }];\n  const router = createBrowserRouter(routes);\n  const content = useRoutes(routes);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        title: \"Text Editor\",\n        mode: mode,\n        toggleMode: toggleMode,\n        text: textMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        alert: alert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Q0YLBH5w1xqhtM7se716e72IM6A=\", false, function () {\n  return [useRoutes];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","createBrowserRouter","RouterProvider","useRoutes","Navbar","TextForm","Alert","About","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","textMode","setTextMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","title","routes","path","element","text","fileName","_jsxFileName","lineNumber","columnNumber","heading","router","content","children","className","_c","$RefreshReg$"],"sources":["D:/Web Development/reactjs/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { createBrowserRouter, RouterProvider, useRoutes } from 'react-router-dom';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport About from './component/About';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [textMode, setTextMode] = useState('dark');\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setTextMode(\"light\");\n      document.body.style.backgroundColor = \"#212529\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"Text Editor - Dark Edition\";\n    } else {\n      setMode(\"light\");\n      setTextMode(\"dark\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", 'success');\n      document.title = \"Text Editor - Light Edition\";\n    }\n  }\n\n  const routes = [\n    {\n      path: \"/about\",\n      element: <About mode={mode} toggleMode={toggleMode} text={textMode} />\n    },\n    {\n      path: \"/home\",\n      element: <TextForm heading=\"Enter Text Here\" mode={mode} toggleMode={toggleMode} text={textMode}  showAlert={showAlert} />\n    }\n  ];\n\n  const router = createBrowserRouter(routes);\n  const content = useRoutes(routes);\n\n  return (\n    <RouterProvider router={router}>\n      <>\n        <Navbar title=\"Text Editor\" mode={mode} toggleMode={toggleMode} text={textMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container\">\n          {content}\n        </div>\n      </>\n    </RouterProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}