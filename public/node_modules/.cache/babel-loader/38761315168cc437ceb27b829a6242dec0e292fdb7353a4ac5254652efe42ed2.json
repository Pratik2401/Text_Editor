{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\reactjs\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport About from './component/About';\nimport { useState } from 'react';\nimport Navbar from './component/Navbar';\n// import TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const [textMode, setTextMode] = useState('dark');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setTextMode(\"light\");\n      document.body.style.backgroundColor = \"#212529\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"Text Editor-Dark Edition\";\n    } else {\n      setMode(\"light\");\n      setTextMode(\"dark\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", 'success');\n      document.title = \"Text Editor-Light Edition\";\n    }\n  };\n  const router = createBrowserRouter([]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        title: \"Text Editor\",\n        mode: mode,\n        toggleMode: toggleMode,\n        text: textMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        alert: alert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {\n            mode: mode,\n            toggleMode: toggleMode,\n            text: textMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(TextForm, {\n            heading: \"Enter Text Here\",\n            mode: mode,\n            toggleMode: toggleMode,\n            text: textMode,\n            showAlert: showAlert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dCIWb6KWoCeHfaTmxsnwWmomC6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["About","useState","Navbar","Alert","createBrowserRouter","RouterProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","textMode","setTextMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","title","router","Router","children","text","fileName","_jsxFileName","lineNumber","columnNumber","Routes","Route","path","element","TextForm","heading","_c","$RefreshReg$"],"sources":["D:/Web Development/reactjs/src/App.js"],"sourcesContent":["import About from './component/About';\nimport { useState } from 'react';\nimport Navbar from './component/Navbar';\n// import TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode]=useState('light')\n  const [textMode,setTextMode]=useState('dark')\n  const [alert,setAlert]=useState(null)\n  \n  const showAlert=(message,type)=>{\n    setAlert(\n      {\n        msg:message,\n        type:type\n      }\n    )\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode===\"light\")\n    {\n      setMode(\"dark\")\n      setTextMode(\"light\")\n      document.body.style.backgroundColor=\"#212529\"\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n      document.title=\"Text Editor-Dark Edition\"\n\n    }\n    else{\n      setMode(\"light\")\n      setTextMode(\"dark\")\n      document.body.style.backgroundColor=\"white\"\n      showAlert(\"Light Mode has been enabled\", 'success');\n      document.title=\"Text Editor-Light Edition\"\n    }\n  }\n\n\n  const router = createBrowserRouter([\n  ]);\n  return (\n    <Router>\n      <>\n        <Navbar title=\"Text Editor\" mode={mode} toggleMode={toggleMode} text={textMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route path=\"/about\" element={<About mode={mode} toggleMode={toggleMode} text={textMode} />} />\n          <Route path=\"/\" element={<TextForm heading=\"Enter Text Here\" mode={mode} toggleMode={toggleMode} text={textMode} showAlert={showAlert} />} />\n        </Routes>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}